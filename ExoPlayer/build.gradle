// Copyright (C) 2016 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.2'
        classpath 'com.google.android.gms:strict-version-matcher-plugin:1.2.4'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.20'
    }
}
allprojects {
    repositories {
        google()
        mavenCentral()
    }
    if (it.hasProperty('externalBuildDir')) {
        if (!new File(externalBuildDir).isAbsolute()) {
            externalBuildDir = new File(rootDir, externalBuildDir)
        }
        buildDir = "${externalBuildDir}/${project.name}"
    }
 group = 'com.google.android.exoplayer'
}

apply from: 'javadoc_combined.gradle'

// Task to prepare outputs directory (runs BEFORE assembly)
task prepareOutputsDirectory {
    group = 'build'
    description = 'Prepares the outputs directory by cleaning it'
    
    doLast {
        def outputsDir = new File(rootDir, 'outputs')
        if (outputsDir.exists()) {
            outputsDir.deleteDir()
        }
        outputsDir.mkdirs()
        println "Prepared clean outputs directory: ${outputsDir.absolutePath}"
    }
}

// Task to build and collect all AAR files
task buildAllAars {
    group = 'build'
    description = 'Builds all library modules and collects AAR files in outputs directory'
    dependsOn prepareOutputsDirectory
}

task buildAllAarsRelease {
    group = 'build'
    description = 'Builds all library modules (Release) and collects AAR files in outputs directory'
    dependsOn prepareOutputsDirectory
}

task buildAllAarsDebug {
    group = 'build'
    description = 'Builds all library modules (Debug) and collects AAR files in outputs directory'
    dependsOn prepareOutputsDirectory
}

// Configure dependencies for library modules
subprojects { subproject ->
    if (subproject.name.startsWith('library-') || subproject.name == 'library') {
        // Make assemble tasks depend on directory preparation
        subproject.tasks.matching { task -> 
            task.name == 'assembleRelease' || task.name == 'assembleDebug' 
        }.all { assembleTask ->
            assembleTask.mustRunAfter prepareOutputsDirectory
        }
        
        buildAllAars.dependsOn subproject.tasks.matching { task -> 
            task.name == 'assembleRelease' || task.name == 'assembleDebug' 
        }
        buildAllAarsRelease.dependsOn subproject.tasks.matching { task -> 
            task.name == 'assembleRelease' 
        }
        buildAllAarsDebug.dependsOn subproject.tasks.matching { task -> 
            task.name == 'assembleDebug' 
        }
    }
}

// Also include extension modules
subprojects { subproject ->
    if (subproject.name.startsWith('extension-')) {
        // Make assemble tasks depend on directory preparation
        subproject.tasks.matching { task -> 
            task.name == 'assembleRelease' || task.name == 'assembleDebug' 
        }.all { assembleTask ->
            assembleTask.mustRunAfter prepareOutputsDirectory
        }
        
        buildAllAars.dependsOn subproject.tasks.matching { task -> 
            task.name == 'assembleRelease' || task.name == 'assembleDebug' 
        }
        buildAllAarsRelease.dependsOn subproject.tasks.matching { task -> 
            task.name == 'assembleRelease' 
        }
        buildAllAarsDebug.dependsOn subproject.tasks.matching { task -> 
            task.name == 'assembleDebug' 
        }
    }
}
