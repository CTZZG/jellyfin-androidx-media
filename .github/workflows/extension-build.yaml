name: ExoPlayer FFmpeg Extension / Build

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:

env:
  NDK_VER: 21.4.7075529  # 不允许修改此值
  # 定义 NDK 的目标安装路径，方便复用
  NDK_INSTALL_PATH: /usr/local/lib/android/sdk/ndk/21.4.7075529

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Cache NDK
        id: cache-ndk
        uses: actions/cache@v3
        with:
          path: ${{ env.NDK_INSTALL_PATH }}
          key: ${{ runner.os }}-${{ env.NDK_VER }}

      - name: Download and extract NDK r21e
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: |
          echo "NDK cache miss. Downloading NDK r21e..."
          sudo mkdir -p ${{ env.NDK_INSTALL_PATH }}
          curl -Lo ndk.zip https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip
          
          # 解压到临时目录
          TMP_EXTRACT_DIR=$(mktemp -d)
          unzip -q ndk.zip -d "${TMP_EXTRACT_DIR}"
          rm ndk.zip

          # 将解压后的 android-ndk-r21e 目录的 *内容* 移动到目标路径
          # 这是关键的修正：确保 NDK 的根目录就是 NDK_INSTALL_PATH
          sudo mv "${TMP_EXTRACT_DIR}/android-ndk-r21e"/* "${{ env.NDK_INSTALL_PATH }}/"
          
          # 清理临时目录
          sudo rm -rf "${TMP_EXTRACT_DIR}"
          echo "NDK downloaded and extracted to ${{ env.NDK_INSTALL_PATH }}"

      - name: Set ANDROID_NDK_HOME Environment Variable
        run: |
          echo "ANDROID_NDK_HOME=${{ env.NDK_INSTALL_PATH }}" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME is set to: ${{ env.NDK_INSTALL_PATH }}"

      - name: Verify NDK installation (for debugging)
        run: |
          echo "ANDROID_NDK_HOME is: $ANDROID_NDK_HOME"
          ls -la $ANDROID_NDK_HOME
          echo "Checking for clang:"
          if [ -f "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi16-clang" ]; then
            ls -la $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi16-clang
            $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi16-clang --version
          else
            echo "Clang not found at expected path!"
            exit 1
          fi

      - name: Build ffmpeg
        run: |
          chmod +x ./build.sh
          ./build.sh

      - name: Build extension and publish library locally
        run: ./gradlew :exoplayer-ffmpeg-extension:publishToMavenLocal

      - name: Upload FFmpeg Extension AARs
        uses: actions/upload-artifact@v4 # 建议使用最新版本
        with:
          name: ffmpeg-extension-aars # 上传后在 GitHub UI 中显示的名字
          # 模块的路径是 ExoPlayer/extensions/ffmpeg/
          # AAR 文件通常在 build/outputs/aar/ 目录下
          # 使用通配符 * 来匹配所有 .aar 文件 (例如 -release.aar, -debug.aar)
          path: ExoPlayer/extensions/ffmpeg/build/outputs/aar/*.aar
          if-no-files-found: error # 如果没有找到文件则报错 (可选: warn, ignore)
